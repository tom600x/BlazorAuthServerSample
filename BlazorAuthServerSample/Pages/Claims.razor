@page "/claims"
@using System.Security.Claims
@using  BlazorAuthServerSample.Models

@inject AuthenticationStateProvider AuthenticationStateProvider
 

<h3>ClaimsPrincipal Data</h3>

<button @onclick="GetClaimsPrincipalData">Get ClaimsPrincipal Data</button>

<p>@_authMessage</p>

@if (_claims.Count() > 0)
{
    <ul>
        @foreach (var claim in _claims)
        {
            <li>@claim.Type: @claim.Value</li>
        }
    </ul>
}


@foreach (var u in user)
{
    <p>@u.UserName</p>
}

<p>@_surnameMessage</p>

@code {
    private string _authMessage;
    private string _surnameMessage;
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();

    private List<User> user = new List<User>();

    [CascadingParameter]
    private Task<AuthenticationState> authState { get; set; }


    private System.Security.Claims.ClaimsPrincipal principal;

    protected async override Task OnParametersSetAsync()
    {
        if (authState != null)
        {
            principal = (await authState).User;
        }
    }


    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            _authMessage = $"{user.Identity.Name} is authenticated.";
            _claims = user.Claims;


            _surnameMessage =
            $"Surname: {user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value}";
        }
        else
        {
            _authMessage = "The user is NOT authenticated.";
        }
    }
}